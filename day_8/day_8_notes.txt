-When a JS file is executed, It creates 1 execution context for global code
and it creates execution context for Each Function call.
-Every Execution Context has 2 phases
  a. Memory creation  (memory allocation happens for variables,functions)
  b. Code Execution   (actual code gets executed)





Variables
=========
-Variables are containers for storing data values. 
 Variable is a name of memory location.
-Variables in Javascript can be declared by using either one of the below 3 keywords:
 1. var   
 2. let
 3. const

	var						let						 const
======================================================================
1.since begining		 1.ECMASCRIPT-6(2015)		1.ECMASCRIPT-6(2015)
2.value can be changed   2.value can be changed     2.cann't be changed
3.initialization is		 3.initialization is		3.mandatory
	not mandatory           not mandatory	
4.can be redeclared		 4.cann't be redeclared		4.cann't be redeclared
5.TDZ - No			 	 5.TDZ - Yes				5.TDZ - Yes
6.function/global		 6.block/function/global	6.block/function/global

N:p - All variables (var,let,const) are hoisted but only 'var' variables are usable/reachable before initialization.
-let/const variables are not reachable/usable before initialization (Temporal Dead Zone)

	
Hoisting:
=========
-The process of assigning variable declarations a default value of 'undefined' during the creation phase is called Hoisting.
-In hoisting, the variable and function declarations are put into memory during the	compile/creation phase before code execution phase.



Temporal Dead Zone
==================
-The period between entering scope and being declared where they cannot be accessed. 
 This period is the temporal dead zone (TDZ).
-The state where variables are un-reachable. They are in memory, but they aren't usable.
-The let and const variables exist in the TDZ from the start of their enclosing scope until they are initialized.
-if a let/const variable is accessed before its declaration, it would throw a ReferenceError. Because of the TDZ.